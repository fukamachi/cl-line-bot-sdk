(in-package #:cl-user)
(defpackage #:linebot/tests/webhook
  (:use #:cl
        #:linebot
        #:prove))
(in-package #:linebot/tests/webhook)

(plan nil)

(subtest "validate-signature"
  (ok (let ((*channel-secret* "channel-secret"))
        (validate-signature "bodybodybodybody" "sySijT686iD0De1RCBU22/1QAunHoSgCIAtJwDX7t18="))
      "valid signature")

  (ok (not (let ((*channel-secret* "channel-secret"))
             (validate-signature "bodybodybodybody" "invalid signature")))
      "invalid signature"))

(subtest "parse-request"
  (let* ((json (uiop:read-file-string (asdf:system-relative-pathname :linebot-tests #P"tests/webhook.json")))
         (events (parse-request json)))
    (is (length events) 12)
    (subtest "message"
      (subtest "text"
        (let ((event (nth 0 events)))
          (is-type event 'message-event)
          (is (event-timestamp event)
              (local-time:unix-to-timestamp 1462629479 :nsec 859000000)
              :test #'local-time:timestamp=)
          (is-type (event-source event) 'source-user)
          (is (source-type (event-source event)) :user)
          (is (user-id (event-source event)) "U206d25c2ea6bd87c17655609a1c37cb8")
          (is-type (event-message event) 'text-message)
          (is (message-id (event-message event)) "325708")
          (is (message-type (event-message event)) :text)
          (is (message-text (event-message event)) "Hello, world")))

      (subtest "image"
        (let ((event (nth 1 events)))
          (is-type event 'message-event)
          (is (event-reply-token event) "nHuyWiB7yP5Zw52FIkcQobQuGDXCTA")
          (is (event-type event) :message)
          (is (event-timestamp event)
              (local-time:unix-to-timestamp 1462629479 :nsec 859000000)
              :test #'local-time:timestamp=)
          (is-type (event-source event) 'source-room)
          (is (source-type (event-source event)) :room)
          (is (room-id (event-source event)) "U206d25c2ea6bd87c17655609a1c37cb8")
          (is-type (event-message event) 'image-message)
          (is (message-id (event-message event)) "325708")
          (is (message-type (event-message event)) :image)))

      (subtest "video"
        (let ((event (nth 2 events)))
          (is-type event 'message-event)
          (is (event-reply-token event) "nHuyWiB7yP5Zw52FIkcQobQuGDXCTA")
          (is (event-type event) :message)
          (is (event-timestamp event)
              (local-time:unix-to-timestamp 1462629479 :nsec 859000000)
              :test #'local-time:timestamp=)
          (is-type (event-source event) 'source-user)
          (is (source-type (event-source event)) :user)
          (is (user-id (event-source event)) "U206d25c2ea6bd87c17655609a1c37cb8")
          (is-type (event-message event) 'video-message)
          (is (message-id (event-message event)) "325708")
          (is (message-type (event-message event)) :video)))

      (subtest "audio"
        (let ((event (nth 3 events)))
          (is-type event 'message-event)
          (is (event-reply-token event) "nHuyWiB7yP5Zw52FIkcQobQuGDXCTA")
          (is (event-type event) :message)
          (is (event-timestamp event)
              (local-time:unix-to-timestamp 1462629479 :nsec 859000000)
              :test #'local-time:timestamp=)
          (is-type (event-source event) 'source-user)
          (is (source-type (event-source event)) :user)
          (is (user-id (event-source event)) "U206d25c2ea6bd87c17655609a1c37cb8")
          (is-type (event-message event) 'audio-message)
          (is (message-id (event-message event)) "325708")
          (is (message-type (event-message event)) :audio)))

      (subtest "location"
        (let ((event (nth 4 events)))
          (is-type event 'message-event)
          (is (event-reply-token event) "nHuyWiB7yP5Zw52FIkcQobQuGDXCTA")
          (is (event-type event) :message)
          (is (event-timestamp event)
              (local-time:unix-to-timestamp 1462629479 :nsec 859000000)
              :test #'local-time:timestamp=)
          (is-type (event-source event) 'source-user)
          (is (source-type (event-source event)) :user)
          (is (user-id (event-source event)) "U206d25c2ea6bd87c17655609a1c37cb8")
          (is-type (event-message event) 'location-message)
          (is (message-type (event-message event)) :location)
          (is (message-location-title (event-message event)) "my location")
          (is (message-location-address (event-message event)) "Tokyo")
          (is (message-location-latitude (event-message event)) 35.65910807942215d0)
          (is (message-location-longitude (event-message event)) 139.70372892916203d0)))

      (subtest "sticker"
        (let ((event (nth 5 events)))
          (is-type event 'message-event)
          (is (event-reply-token event) "nHuyWiB7yP5Zw52FIkcQobQuGDXCTA")
          (is (event-type event) :message)
          (is (event-timestamp event)
              (local-time:unix-to-timestamp 1462629479 :nsec 859000000)
              :test #'local-time:timestamp=)
          (is-type (event-source event) 'source-user)
          (is (source-type (event-source event)) :user)
          (is (user-id (event-source event)) "U206d25c2ea6bd87c17655609a1c37cb8")
          (is-type (event-message event) 'sticker-message)
          (is (message-id (event-message event)) "325708")
          (is (message-type (event-message event)) :sticker)
          (is (message-sticker-package-id (event-message event)) "1")
          (is (message-sticker-id (event-message event)) "1"))))

    (subtest "follow"
      (let ((event (nth 6 events)))
        (is-type event 'follow-event)
        (is (event-reply-token event) "nHuyWiB7yP5Zw52FIkcQobQuGDXCTA")
        (is (event-type event) :follow)
        (is (event-timestamp event)
            (local-time:unix-to-timestamp 1462629479 :nsec 859000000)
            :test #'local-time:timestamp=)
        (is-type (event-source event) 'source-user)
        (is (source-type (event-source event)) :user)
        (is (user-id (event-source event)) "U206d25c2ea6bd87c17655609a1c37cb8")))

    (subtest "unfollow"
      (let ((event (nth 7 events)))
        (is-type event 'unfollow-event)
        (is (event-type event) :unfollow)
        (is (event-timestamp event)
            (local-time:unix-to-timestamp 1462629479 :nsec 859000000)
            :test #'local-time:timestamp=)
        (is-type (event-source event) 'source-user)
        (is (source-type (event-source event)) :user)
        (is (user-id (event-source event)) "U206d25c2ea6bd87c17655609a1c37cb8")))

    (subtest "join"
      (let ((event (nth 8 events)))
        (is-type event 'join-event)
        (is (event-reply-token event) "nHuyWiB7yP5Zw52FIkcQobQuGDXCTA")
        (is (event-type event) :join)
        (is (event-timestamp event)
            (local-time:unix-to-timestamp 1462629479 :nsec 859000000)
            :test #'local-time:timestamp=)
        (is-type (event-source event) 'source-group)
        (is (source-type (event-source event)) :group)
        (is (group-id (event-source event)) "cxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")))
    (subtest "leave"
      (let ((event (nth 9 events)))
        (is-type event 'leave-event)
        (is (event-type event) :leave)
        (is (event-timestamp event)
            (local-time:unix-to-timestamp 1462629479 :nsec 859000000)
            :test #'local-time:timestamp=)
        (is-type (event-source event) 'source-group)
        (is (source-type (event-source event)) :group)
        (is (group-id (event-source event)) "cxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")))

    (subtest "postback"
      (let ((event (nth 10 events)))
        (is-type event 'postback-event)
        (is (event-reply-token event) "nHuyWiB7yP5Zw52FIkcQobQuGDXCTA")
        (is (event-type event) :postback)
        (is (event-timestamp event)
            (local-time:unix-to-timestamp 1462629479 :nsec 859000000)
            :test #'local-time:timestamp=)
        (is-type (event-source event) 'source-user)
        (is (source-type (event-source event)) :user)
        (is (user-id (event-source event)) "U206d25c2ea6bd87c17655609a1c37cb8")
        (is (event-postback-data event) "action=buyItem&itemId=123123&color=red")))

    (subtest "beacon"
      (let ((event (nth 11 events)))
        (is-type event 'beacon-event)
        (is (event-reply-token event) "nHuyWiB7yP5Zw52FIkcQobQuGDXCTA")
        (is (event-type event) :beacon)
        (is (event-timestamp event)
            (local-time:unix-to-timestamp 1462629479 :nsec 859000000)
            :test #'local-time:timestamp=)
        (is-type (event-source event) 'source-user)
        (is (source-type (event-source event)) :user)
        (is (user-id (event-source event)) "U206d25c2ea6bd87c17655609a1c37cb8")
        (is (beacon-hwid (event-beacon event)) "d41d8cd98f")
        (is (beacon-type (event-beacon event)) :enter)))))
(finalize)
